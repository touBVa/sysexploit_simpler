from pwn import *
class CustomROP:
    def __init__(self):
        self.process_lib_info = []
    # return True if it successes setting elf format of binary and library
    def setELF(self, binary, defaultLib):
        try:
            targetBin = ELF(binary)
            targetLib = ELF(defaultLib)
            self.process_lib_info.append(targetBin)
            self.process_lib_info.append(targetLib)
            return True
        except Exception as e:
            print("sefELF Error: ", e)
            return False

    # returns an offset of the gadget in the int form
    # Maximum two instructions are concatable
    def findGadget(self, inst1, inst2):
        targetBin = ROP(self.process_lib_info[0])
        targetLib = ROP(self.process_lib_info[1])

        if (inst2 == null):
            try:
                gadget_offset = int((targetLib.find_gadget([inst1])[0]))
                return gadget_offset
            except Exception as e:
                print("Found no gadget from the binary: ", e)
                try:
                    gadget_offset = int ((targetBin.find_gadget([inst1])[0]))
                    return gadget_offset
                except Exception as e:
                    print("Found no gadget from the given library: ", e)
                    return None
        elif (inst1 == null):
            print("You did not give me any target instrctions!")
            return None
        else:
            try:
                gadget_offset = int((targetLib.find_gadget([inst1, inst2])[0]))
                return gadget_offset
            except Exception as e:
                print("Found no gadget from the binary: ", e)
                try:
                    gadget_offset = int((targetBin.find_gadget([inst1, inst2])[0]))
                    return gadget_offset
                except Exception as e:
                    print("Found no gadget from the given library: ", e)
                    return None

    # param should be given as an binary format
    def findFunctionAndString(self, functionName, param):
        targetBin = self.process_lib_info[0]
        targetLib = self.process_lib_info[1]
        if(param == null):
            try:
                function_offset = int(targetLib.symbols[functionName])
                return function_offset
            except Exception as e:
                print("No function found from the given library: ", e)
                return None
        elif(functionName == null):
            print("Seriousely? No target function?")
            return None
        else:
            function_offset = int(targetLib.symbols[functionName])
            string_offset = int(list(targetLib.search(param))[0])
            return function_offset, string_offset

